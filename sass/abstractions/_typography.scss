//
//	Typography
//

// Baseline formula based on the $alpha-line-height variable.
// use: @include text-dimensions(#font-size, #line-height, #margin-bottom, #padding-top)
$baseline-unit: $alpha-font-size * $alpha-line-height;
$basefontpercent: $alpha-font-size / 16 * 100;

@mixin text-dimensions($fs: 1, $lh: 1, $mb: 0, $pt: 0, $pb: 0, $mt: 0) {
  // sass-lint:disable-block no-duplicate-properties
  // use this for rems.
  font-size: #{ms($fs)}px;
  font-size: ms($fs) / $alpha-font-size * 1rem;
  // font-size: ms($fs)/$alpha-font-size*1em;
  line-height: #{($baseline-unit / ms($fs)) * $lh}em;
  // margin-bottom: #{($baseline-unit / ms($fs)) * $mb}em;

  @if $mb > 0 {
    margin-bottom: $mb * $alpha-font-size * 1px;
    margin-bottom: $mb * 1rem;
  }

  @if $mt > 0 {
    margin-top: $mt * $alpha-font-size * 1px;
    margin-top: $mt * 1rem;
  }

  @if $pt > 0 {
    // padding-top: #{($baseline-unit / ms($fs)) * $pt}em;
    padding-top: $pt * $alpha-font-size * 1px;
    padding-top: $pt * 1rem;
  }
  @if $pb > 0 {
    // padding-bottom: #{($baseline-unit / ms($fs)) * $pb}em;
    padding-bottom: $pb * $alpha-font-size * 1px;
    padding-bottom: $pb * 1rem;
  }
}

@mixin font-size($fs: 1) {
  // sass-lint:disable-block no-duplicate-properties
  font-size: #{ms($fs)}px;
  font-size: ms($fs) / $alpha-font-size*1rem;
}

@mixin input-dimensions($fs: 1, $lh: 1, $mb: 0, $pt: 0, $pb: 0, $mt: 0) {
  // sass-lint:disable-block no-duplicate-properties
  // Use this for rems.
  font-size: #{ms($fs)}px;
  font-size: ms($fs) / $alpha-font-size*1rem;
  // "/ 1.5 * 2.6" is fix for firefox input elements.
  line-height: #{($baseline-unit / ms($fs)) * $lh / 1.65 * 2.6}em;
  height: #{($baseline-unit / ms($fs)) * $lh / 1.65 * 2.6}em;

  @if $mb > 0 {
    margin-bottom: $mb * $alpha-font-size * 1px;
    margin-bottom: $mb * 1rem;
  }

  @if $mt > 0 {
    margin-top: $mt * $alpha-font-size * 1px;
    margin-top: $mt * 1rem;
  }

  @if $pt > 0 {
    // "* 0.45" is fix for firefox input elements.
    padding-top: $pt * $alpha-font-size * .45 * 1px;
    padding-top: $pt * .45 * 1rem;
  }
  @if $pb > 0 {
    // "* 0.45" is fix for firefox input elements.
    padding-bottom: $pb * $alpha-font-size * .45 * 1px;
    padding-bottom: $pb * .45 * 1rem;
  }
}

// Baseline formulas based on the $alpha-baseline-grid variable.
// Use: @include baseline-dimensions(#modular-scale-increment, #padding-top, #padding-bottom, #leading)
@mixin baseline-dimensions($msi: 0, $pt: 0, $mb: 0, $pb: 0, $l: $alpha-leading) {
  // sass-lint:disable-block no-duplicate-properties
  @if $msi == 0 {
    font-size: 1em;
    line-height: ((ceil($alpha-font-size / $alpha-baseline-grid) * $alpha-baseline-grid) + ($alpha-baseline-grid * $l)) / $alpha-font-size;

    @if $pt > 0 {
      padding-top: $alpha-baseline-grid / $alpha-font-size * $pt * 1em;
    }

    @if $pb > 0 {
      padding-bottom: $alpha-baseline-grid / $alpha-font-size*$pb*1em;
    }

    @if $mb > 0 {
      margin-bottom: $alpha-baseline-grid / $alpha-font-size*$mb*1em;
    }
  }

  @if $msi != 0 {
    font-size: ms($msi) / $alpha-font-size * 1em;
    line-height: ((ceil(ms($msi) / $alpha-baseline-grid) * $alpha-baseline-grid) + ($alpha-baseline-grid * $l)) / (ms($msi));

    @if $pt > 0 {
      padding-top: $alpha-baseline-grid * $pt / ms($msi) * 1em;
    }

    @if $pb > 0 {
      padding-bottom: $alpha-baseline-grid * $pb / ms($msi) * 1em;
    }

    @if $mb > 0 {
      margin-bottom: $alpha-baseline-grid * $mb / ms($msi) * 1em;
    }
  }
}
@mixin base-header {
  color: $beta-ui-color;
  margin: 0;
}

%base-header {
  @include base-header;
}
@mixin h1 {
  @include base-header;
  @include text-dimensions(3, 1.3, 1);
  @include mq($bp-desktop-s) {
    @include text-dimensions(5, 1.4, 1);
  }

  font-family: $beta-font-family;
  font-weight: $beta-font-weight;
  letter-spacing: $letter-spacing * 1rem;
}

%h1 {
  @include h1;
}

@mixin h2 {
  @include base-header;
  @include text-dimensions(2, 1.15, .3, 2);
  font-family: $beta-font-family;
  letter-spacing: $letter-spacing * .75 * 1rem;
}

%h2 {
  @include h2;
}

@mixin h3 {
  @include base-header;
  @include text-dimensions(0, 1, 0);
  letter-spacing: $letter-spacing * .5 * 1rem;
}

%h3 {
  @include h3;
}
