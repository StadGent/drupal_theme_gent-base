//
// Grid.
//
@include add-grid(24);
@include add-gutter(1/3);
@include add-gutter-style('split');

.container-wrapper {
  @include mq($bp-container) {
    width: $bp-container;
    margin: 0 auto;
    border-left: solid 1px $container-color;
    border-right: solid 1px $container-color;
  }
}

.l-row {
  @include clearfix;
  @include px-padding-lr(1, 1);
  @include mq($bp-tablet-s) {
    @include px-padding-lr(2, 2);
  }

  position: relative;
  margin: 0 auto;
  max-width: $bp-tablet-l;

  .l-row {
    padding: 0;
  }
}
@mixin l-full {
  @include clearfix;
  @include grid-span(24, 1, $gutter: 0);
}

// Semantic grid classes.
.l-full,
.l-primary,
.l-primary--offset,
.l-secondary,
.l-half,
.l-fourth,
.l-column {
  @include l-full;
}

// Clear full width grid spans in case we use it in the same isolation grid as others.
.l-header,
.l-footer {
  @include l-full; // sass-lint:disable-line placeholder-in-extend
  clear: both;
}

.l-header {
  @include padding-bottom--big; // sass-lint:disable-line placeholder-in-extend
}

.l-footer {
  @include padding-top--big; // sass-lint:disable-line placeholder-in-extend
}


.l-primary {
  @include mq($bp-tablet-s) {
    @include grid-span(14);
    margin-left: 0;
  }

  margin-left: 0;
}

.l-primary--offset {
  @include mq($bp-tablet-s) {
    @include grid-span(14, 6, $gutter: 0);
  }
}

.l-secondary {
  @include mq($bp-tablet-s) {
    @include grid-span(9, 16);
  }
}

// 1 - 1 - 1 - 2 - 2
.l-half {
  @include add-grid(24);
  @include add-gutter-style('opposite');

  @include float-span(24, 'last');

  @include mq($bp-tablet-m) {
    @include float-span(12);

    &:nth-of-type(2n) {
      @include float-span(12, 'last');
    }
  }
}

// 1 - 1 - 2 - 3 - 3
.l-third {
  @include add-grid(24);
  @include add-gutter-style('opposite');

  // Shouldn't be necessary, but sometimes our container loses it's 100% width.
  @include float-span(24, 'last');

  @include mq($bp-tablet-s) {
    @include float-span(12);

    &:nth-of-type(2n) {
      @include float-span(12, 'last');
    }
  }

  @include mq($bp-tablet-m) {
    &,
    &:nth-of-type(2n) {
      @include float-span(8);
    }

    &:nth-of-type(3n) {
      @include float-span(8, 'last');
    }
  }
}

// In the region content-top, island-epsilon should span 100% when before tablet-s.
.region-content-top {
  .island--epsilon.l-third {
    @include mq($bp-tablet-s, 'max') {
      @include float-span(24, 'last');
    }
  }
}

// When we are using masonry view (class multi-column), we do not want the float and clear behavior of
// our floating grid. Reset those so masonry can handle the layout.
.multi-column {
  .l-third,
  .l-fourth {
    // sass-lint:disable-block no-important
    display: block;
    margin-left: 0 !important;
    margin-right: 0 !important;
    clear: none !important;
    float: none !important;
  }

  // Our element that will be used for masonry to handle the gutter
  .gutter {
    width: gutter-span();
  }
}

// 1 - 1 - 2 - 3 - 4
.l-fourth {
  @include add-grid(24);
  @include add-gutter-style('opposite');
  @include float-span(24);

  @include mq($bp-tablet-s) {
    @include float-span(12);

    &:nth-of-type(2n) {
      @include float-span(12, 'last');
    }
  }

  @include mq($bp-tablet-m) {
    &,
    &:nth-of-type(2n) {
      @include float-span(8);
    }

    &:nth-of-type(3n) {
      @include float-span(8, 'last');
    }
  }

  @include mq($bp-tablet-l) {
    &,
    &:nth-of-type(2n),
    &:nth-of-type(3n) {
      @include float-span(6);
    }

    &:nth-of-type(4n) {
      @include float-span(6, 'last');
    }
  }
}

// Variant to l-fourth that immediately jumps to one column
// 1 - 1 - 1 - 4 - 4
.l-fourth-to-single {
  @include add-grid(24);
  @include add-gutter-style('opposite');
  @include float-span(24);

  @include mq($bp-tablet-m) {
    @include float-span(6);

    &:nth-of-type(4n) {
      @include float-span(6, 'last');
    }
  }
}

// 1 - 2 - 2 - 4 - 4
.l-column {
  @include add-grid(24);
  @include add-gutter-style('opposite');
  @include float-span(24);

  @include mq($bp-phone-m) {
    @include float-span(12);

    &:nth-of-type(2n) {
      @include float-span(12, 'last');
    }
  }

  @include mq($bp-tablet-m) {
    &,
    &:nth-of-type(2n) {
      @include float-span(6);
    }

    &:nth-of-type(4n) {
      @include float-span(6, 'last');
    }
  }
}

// 2 - 4 - 2 - 4 - 4
.l-thumb {
  @include add-grid(24);
  @include add-gutter-style('opposite');
  @include float-span(12);
  @include margin-tb(.1, .1);

  &:nth-of-type(2n) {
    @include float-span(12, 'last');
  }

  @include mq($bp-phone-m) {
    &,
    &:nth-of-type(2n) {
      @include float-span(8);
    }

    &:nth-of-type(3n) {
      @include float-span(8, 'last');
    }
  }

  @include mq($bp-tablet-s) {
    &,
    &:nth-of-type(3n) {
      @include float-span(12);
    }

    &:nth-of-type(2n) {
      @include float-span(12, 'last');
    }
  }

  @include mq($bp-tablet-m) {
    &,
    &:nth-of-type(2n) {
      @include float-span(8);
    }

    &:nth-of-type(3n) {
      @include float-span(8, 'last');
    }
  }
}

// 1 - 1 - 1 - 2 - 2
.l-half-alt {
  @include add-grid(24);
  @include add-gutter-style('opposite');
  @include add-gutter(1/3);
  @include float-span(24);

  @include mq($bp-tablet-m) {
    @include add-gutter(0);
    @include float-span(12);

    &:nth-of-type(2n) {
      @include float-span(12, 'last');
    }
  }
}

// 1 - 1 - 1 - 4 - 4
.l-fourth-alt {
  @include add-grid(24);
  @include add-gutter-style('opposite');
  @include add-gutter(1/3);
  @include float-span(24);

  @include mq($bp-tablet-m) {
    @include add-gutter(0);
    @include float-span(6);

    &:nth-of-type(4n) {
      @include float-span(6, 'last');
    }
  }
}

// Helper classes
.l-left {
  float: left;
}

.l-right {
  float: right;
}

.l-center {
  text-align: center;
}
