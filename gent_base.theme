<?php

/**
 * @file
 * Functions to support theming in the Gent Base theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Template\Attribute;
use Drupal\Component\Utility\Html;
use Drupal\image\Entity\ImageStyle;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\Core\Render\Element;
use Drupal\webform\Entity\Webform;

include __DIR__ . '/includes/theme.inc';
include __DIR__ . '/includes/form.inc';
include __DIR__ . '/includes/lazy.inc';

/**
 * Implements hook_theme().
 */
function gent_base_theme() {
  return [
    'gent_base_webform' => [
      'render element' => 'form',
    ],
    'gent_base_file_upload' => [
      'variables' => [
        'picture_element' => NULL,
        'picture_button' => NULL,
      ],
    ],
    'form_element_bare' => [
      'render element' => 'element',
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gent_base_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (in_array($form_id, _gent_base_get_system_forms())) {
    $form['#attributes']['class'][] = 'no-style';
    $form['#attributes']['class'][] = 'no-optional';
  }

  if (in_array($form_id, ['dg_newsletter_subscribe_form'])) {
    $form['wrapper']['email_address']['#stacked'] = TRUE;
  }

  // Remove button classes form delete action.
  if (isset($form['actions']['delete']['#attributes']['class'])) {
    foreach (['button', 'button--danger'] as $class) {
      if (($key = array_search($class, $form['actions']['delete']['#attributes']['class'])) !== FALSE) {
        unset($form['actions']['delete']['#attributes']['class'][$key]);
      }
    }

    $form['actions']['delete']['#attributes']['class'][] = 'delete';
    $form['actions']['delete']['#attributes']['class'][] = 'right';
  }

  if (isset($form['#webform_id'])) {
    $form['#theme'] = ['gent_base_webform'];
  }

  $form['#pre_render'][] = '_gent_base_form_pre_render';
}

/**
 * Pre-render function for webforms.
 *
 * @param array $form
 *   Build array for the form.
 *
 * @return mixed
 *   Altered build array.
 */
function _gent_base_form_pre_render(array $form) {
  $form['#has_inputs'] = FALSE;
  $elements = &$form;
  if (!empty($form['elements'])) {
    $elements = &$form['elements'];
  }

  _gent_base_loop_form_elements($elements);

  // If this is a multistep form > get the elements of the current step.
  if (isset($form['#webform_id'])) {
    $form['#webform'] = $webform = Webform::load($form['#webform_id']);
    if ($webform->hasWizardPages() && isset($form['progress'])) {
      $current_page = $form['progress']['#current_page'];
      $elements = $current_page && !empty($form['elements'][$current_page])
        ? $form['elements'][$current_page]
        : [];
    }
  }

  $form['#has_inputs'] = (bool) _gent_base_count_inputs($elements);

  return $form;
}

/**
 * Switch places for prev/next.
 *
 * Implements hook_preprocess().
 */
function gent_base_preprocess_webform_actions(&$variables) {
  if (isset($variables['element']['wizard_prev'])) {
    $button = $variables['element']['wizard_prev'];
    $button['#attributes']['class'][] = 'button-secondary';

    unset($variables['element']['wizard_prev']);
    $variables['element'][] = $button;
  }
}

/**
 * Implements hook_preprocess().
 */
function gent_base_preprocess(&$variables, $hook) {
  $variables['base_path'] = base_path();
}

/**
 * Implements hook_preprocess_page().
 */
function gent_base_preprocess_page(&$variables) {
  gent_base_preprocess_page_hero_image($variables);
}

/**
 * Helper to add the hero display of the current node to the page header.
 */
function gent_base_preprocess_page_hero_image(&$variables) {
  $route = \Drupal::request()->get('_route');
  if ($route !== 'entity.node.canonical') {
    $variables['attributes']['class'][] = 'overview-page';
    return;
  }

  $entity = \Drupal::request()->get('node');
  if (!$entity->access('view')) {
    return;
  }

  $isViewMode = gent_base_is_view_mode(
    'node.' . $entity->bundle() . '.hero_image'
  );
  if ($isViewMode) {
    $variables['hero_image'] = \Drupal::entityTypeManager()
      ->getViewBuilder('node')
      ->view($entity, 'hero_image');
  }
}

/**
 * Implements hook_preprocess_input__submit().
 */
function gent_base_preprocess_input__submit(&$variables) {
  if (isset($variables['element']['#submit'][0]) && $variables['element']['#submit'][0] == 'file_managed_file_submit') {
    $variables['attributes']['class'][] = 'button--inline';
  }
}

/**
 * Implements hook_preprocess_container().
 */
function gent_base_preprocess_container(&$variables) {
  if (isset($variables['attributes']['class'][0]) && $variables['attributes']['class'][0] === "filter-help") {
    unset($variables['children']);
  }
}

/**
 * Implements hook_preprocess_dg_auth_block().
 *
 * This hook can be removed when OIDC authentication is adopted by all Drupal 8
 * websites using SAML auth.
 */
function gent_base_preprocess_dg_auth_block(&$variables) {
  $variables['login_link']['#options']['attributes']['class'][] = 'login-link';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Adds theme settings as variables to html.twig template.
 */
function gent_base_preprocess_html(&$variables) {
  $color = (theme_get_setting('color_scheme')) ?
    theme_get_setting('color_scheme') : 'cyan';
  $variables['cs']['color'] = $color;

  $hex = (theme_get_setting('color_scheme_hex')) ?
    theme_get_setting('color_scheme_hex') : '009DE0';
  $variables['cs']['hex'] = '#' . $hex;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for the item_list__steps theme function.
 * Use item_list__steps theme function to render steps for ex. form steps.
 *
 * Every item in #items should be an array that contains:
 * - #markup = the item value
 * - #url = optional url for the count and the list value.
 * - #active = if the item is active
 * - #completed = if the item is completed
 */
function gent_base_preprocess_item_list__steps(&$variables) {
  $items = [];
  $count = 1;
  foreach ($variables['items'] as &$item) {
    if (!is_array($item['value'])) {
      $item['value'] = [
        '#markup' => $item['value'],
      ];
    }
    else {
      if (!empty($item['value']['#url'])) {
        $item['url'] = $item['value']['#url'];
      }

      $item['attributes']['class'] = 'progress';
      if (!empty($item['value']['#active'])) {
        $item['attributes']['class'][] = 'progress-active';
      }

      if (!empty($item['value']['#completed'])) {
        $item['attributes']['class'][] = 'progress-previous';
        $item['icon']['#markup'] = '<i class="icon icon-check"></i>';
      }
    }

    $items[$count] = $item;
    $count++;
  }

  $variables['items'] = $items;
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Preprocess for the item_list__attachments theme function.
 * Use item_list__attachments theme function to render
 * a list of attachments with additional file size and type.
 *
 * Every item in #items should be an array that contains:
 * - renderable array = the item value
 * - #size = the size of the attachment
 * - #type = the type of the attachment
 */
function gent_base_preprocess_item_list__attachments(&$variables) {
  foreach ($variables['items'] as &$item) {
    $item += [
      'size' => NULL,
      'type' => NULL,
    ];

    if (is_array($item['value'])) {
      if (!empty($item['value']['#size'])) {
        $item['size'] = $item['value']['#size'];
      }
      if (!empty($item['value']['#type'])) {
        $item['type'] = $item['value']['#type'];
      }
    }

  }

  $variables['attributes']['class'][] = 'no-style';
  $variables['attributes']['class'][] = 'links';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * This hook can be removed when OIDC authentication is adopted by all Drupal 8
 * websites using SAML auth.
 */
function gent_base_preprocess_item_list__dg_auth_block_menu(&$variables) {
  end($variables["items"])['attributes']['class'][] = 'button button-small button-secondary';
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add theming classes to dg_blocks.
 */
function gent_base_preprocess_block(&$variables) {
  switch ($variables['elements']['#plugin_id']) {
    case 'dg_blocks_address_block':
      $variables['attributes']['class'][] = 'dg-block-post-address';
      break;

    case 'dg_blocks_links_block':
      $variables['attributes']['class'][] = 'dg-block-disclaimer';
      break;

    default:
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_block__views_search_form_header(&$variables) {
  $form = &$variables['content'];

  if ($form['#form_id'] === 'views_exposed_form') {
    $form['search']['#value'] = NULL;
    $form['search']['#required'] = TRUE;

    $form['#prefix'] = '<a href="' . $form['#action'] . '" class="search--link" title="' . t('Search') . '">' . t('Search') . '</a>';
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function gent_base_theme_registry_alter(&$theme_registry) {
  // Add support for the information property on elements.
  $supported_types = ['fieldset', 'form_element'];
  foreach ($supported_types as $supported_type) {
    if (!isset($theme_registry[$supported_type])) {
      continue;
    }

    $theme_registry[$supported_type]['preprocess functions'][] = 'gent_base_preprocess_element_information';
  }
}

/**
 * Preprocess function for elements that support the #information property.
 *
 * @param array $variables
 *   Element variables.
 */
function gent_base_preprocess_element_information(array &$variables) {
  $element = &$variables['element'];
  $variables['information'] = NULL;

  if (!empty($element['#information'])) {
    $information_attributes = $element['#information_attributes'] ?? [];
    if (!empty($element['#attributes']['id'])) {
      $information_attributes['id'] = $element['#attributes']['id'] . '--description';
    }

    $variables['information']['attributes'] = new Attribute($information_attributes);
    $variables['information']['content'] = $element['#information'];
  }
}

/**
 * Implements hook_preprocess_form_element().
 */
function gent_base_preprocess_form_element(&$variables) {
  $element = &$variables['element'];
  if (isset($element['#help'])) {
    $element['#information'] = $element['#help'];
  }

  if (isset($element['#description']) &&
      isset($element['#webform']) &&
      $element['#type'] !== 'webform_image_file') {
    $element['#information'] = $element['#description'];
    unset($variables['description']);
  }

  $variables['in_fieldset'] = $element['#in_fieldset'] ?? NULL;
  $variables['parent_type'] = $element['#parent_type'] ?? NULL;
  $variables['stacked'] = $element['#stacked'] ?? NULL;
  $variables['has_row'] = $element['#has_row'] ?? NULL;
}

/**
 * Implements hook_preprocess_webform_element_help().
 */
function gent_base_preprocess_webform_element_help(&$variables) {
  $variables['help_icon'] = NULL;
}

/**
 * Implements hook_preprocess_fieldset().
 */
function gent_base_preprocess_fieldset(&$variables) {
  $element = &$variables['element'];
  if (isset($element['#description'])) {
    $element['#information'] = $element['#description'];
  }

  // Fieldsets themselves should not be marked as optional.
  // Only a fieldset wrapping Radios & Checkboxes should be marked as such.
  $variables['fieldset_optional'] = isset($element['#type']) &&
      $element['#type'] !== 'fieldset' && empty($element['#required']);

  if (isset($element['#has_row'])) {
    $variables['has_row'] = $element['#has_row'] ?? NULL;
  }

  $variables['has_columns'] = $element['#has_columns'] ?? NULL;
}

/**
 * Implements hook_preprocess_menu_local_task().
 */
function gent_base_preprocess_menu_local_task(&$variables) {
  $variables['link']['#options']['attributes']['class'][] = 'button';
  $variables['link']['#options']['attributes']['class'][] = 'button-small';

  if (isset($variables['is_active']) && $variables['is_active']) {
    $variables['link']['#options']['attributes']['class'][] = 'button-primary';
  }
  else {
    $variables['link']['#options']['attributes']['class'][] = 'button-secondary';
  }
}

/**
 * Implements hook_preprocess_field().
 */
function gent_base_preprocess_field(&$variables) {
  if ($variables["element"]["#field_name"] == 'field_tags' && count($variables["items"]) > 0) {

    foreach ($variables['items'] as $key => $item) {
      $variables["items"][$key]["content"]["#options"]['attributes']['class'][] = 'tag';
    }
  }

  // Add timeline wrapper.
  if ($variables["element"]["#field_name"] == 'field_paragraphs') {
    $paragraphs = $variables['element']["#items"]->getIterator();

    $isTimeline = FALSE;
    $isProgram = FALSE;

    foreach ($paragraphs as $key => $paragraph) {
      $targetId = $paragraph->get('target_id')->getValue();
      if (!$targetId) {
        continue;
      }

      $entity = Paragraph::load($targetId);
      if ($entity) {
        $type = $entity->get('type')->getString();

        if ($type === 'timeline_frame') {
          $isProgram = _gent_base_get_timeline_display($entity) === 'alt';

          // It's the first timeline frame.
          if ($isTimeline === FALSE) {
            $isTimeline = TRUE;

            if ($isProgram) {
              $variables['items'][$key]['content']['#prefix'] =
                '<div class="programme-wrapper"><h2 class="visually-hidden">' . t('programme') . '</h2>' .
                '<dl class="programme highlight highlight--top"><div class="highlight__inner">';
            }
            else {
              $variables['items'][$key]['content']['#prefix'] =
                '<div class="timeline-wrapper"><h2 class="visually-hidden">' . t('timeline') . '</h2>' .
                '<dl class="timeline accordion">';
            }
          }
        }
        elseif ($isTimeline === TRUE) {
          $isTimeline = FALSE;

          if ($isProgram) {
            $variables['items'][$key - 1]['content']['#suffix'] = '</div></dl></div>';
          }
          else {
            $variables['items'][$key - 1]['content']['#suffix'] = '</dl></div>';
          }
        }
      }
    }
  }

  $function = sprintf('gent_base_theme_preprocess_field__%s', $variables['field_name']);
  if (function_exists($function)) {
    call_user_func_array($function, [&$variables]);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * If a image paragraph contains multiple images,
 * the view mode of the images is changed to 'gallery_multiple'.
 */
function gent_base_preprocess_paragraph__image(&$variables) {
  $variables['image_gallery_type'] = 'single';
  if (!isset($variables['content']['field_image']['#items'])) {
    return;
  }
  $image_count = count($variables['content']['field_image']['#items']);

  if ($image_count === 1 || !gent_base_is_view_mode('paragraph.image.gallery_multiple')) {
    return;
  }

  $variables['image_gallery_type'] = 'multiple';
}

/**
 * Preprocessor for the image field to show a gallery.
 *
 * If a image field contains multiple images,
 * the view mode of the images is changed to 'gallery_multiple'.
 */
function gent_base_theme_preprocess_field__field_image(&$variables) {
  $image_count = count($variables['items']);
  if ($image_count < 2 || !gent_base_is_view_mode('media.image.gallery_multiple')) {
    return;
  }

  for ($i = 0; $i < $image_count; $i++) {
    $variables['items'][$i]['content']['#view_mode'] = 'gallery_multiple';
    unset($variables['items'][$i]['content']['#cache']['keys']);
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_field__field_documents(&$variables) {
  $documents = $variables['items'];

  $variables['document_unique_id'] = Html::getUniqueId('documentbox');

  foreach ($documents as $key => $document) {
    unset($document['attributes']);
    if ($key < 2) {
      $variables['documents_visible'][] = $document;
    }
    else {
      $variables['documents_invisible'][] = $document;
    }
  }

  if (isset($variables['documents_invisible'])) {
    $extra_documents_count = count($variables['documents_invisible']);
    if ($extra_documents_count === 1) {
      $variables['documents_toggle_text'] = t('There is 1 other document');
    }
    else {
      $variables['documents_toggle_text'] = t('There are @count other documents', ['@count' => $extra_documents_count]);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_field__field_contacts(&$variables) {
  $contacts = $variables['items'];
  $entity = $variables['element']['#object'];

  // Change the view_mode of the contacts if there are more then 3 contacts.
  foreach ($contacts as $key => $contact) {
    $view_mode = (count($contacts) > 2) ? 'teaser_tiny' : 'teaser_with_link';
    if ($view_mode === 'teaser_with_link') {
      $variables['items'][$key]['attributes']->addClass('teaser', 'teaser-contact');
    }
    $variables['items'][$key]['content']['#view_mode'] = $view_mode;
    $variables['items'][$key]['content']['#cache']['tags'] = $entity->getCacheTags();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_field__field_responsible_person(&$variables) {
  foreach ($variables['items'] as $key => $item) {
    $variables["items"][$key]["content"]["#options"]['attributes']['class'][] = 'standalone-link';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_field__field_contact_categories(&$variables) {
  $contacts = $variables['element']['#object']->field_contacts->count();
  $contact_categories = $variables['items'];
  if ($contacts <= 2) {
    foreach ($contact_categories as $key => $category) {
      $variables['items'][$key]['attributes']->addClass('teaser', 'teaser-contact');
    }
  }

  foreach ($variables['items'] as $key => $item) {
    $variables['items'][$key]['content']['#options']['attributes']['class'][] = 'standalone-link';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_field__node__contact(&$variables) {
  foreach ($variables['items'] as $key => $item) {
    $variables["items"][$key]["content"]["#options"]['attributes']['class'][] = 'standalone-link';
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_media__document(&$variables) {
  if (isset($variables['name']) && isset($variables['content']['field_media_file'])) {
    $index = 0;
    while (isset($variables['content']['field_media_file'][$index])) {
      $variables['content']['field_media_file'][$index]['#description'] = $variables['name'];

      $index++;
    }
  }
}

/**
 * Prepares variables for multi file form widget templates.
 *
 * Default template: file-widget-multiple.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the widgets.
 */
function gent_base_preprocess_file_widget_multiple(array &$variables) {
  $element = $variables['element'];

  // Get our list of widgets in order (needed when the form comes back after
  // preview or failed validation).
  $widgets = [];
  foreach (Element::children($element) as $key) {
    $widgets[] = &$element[$key];
  }
  usort($widgets, '_field_multiple_value_form_sort_helper');

  $rows = [];
  foreach ($widgets as $key => &$widget) {
    // Save the uploading row for last.
    if (empty($widget['#files'])) {
      $widget['#title'] = $element['#file_upload_title'];
      $widget['#description'] = \Drupal::service('renderer')->renderPlain($element['#file_upload_description']);
      continue;
    }

    // Delay rendering of the buttons, so that they can be rendered later in the
    // "operations" column.
    $operations_elements = [];
    foreach (Element::children($widget) as $sub_key) {
      if (isset($widget[$sub_key]['#type']) && $widget[$sub_key]['#type'] == 'submit') {
        hide($widget[$sub_key]);
        $operations_elements[] = &$widget[$sub_key];
      }
    }

    // Delay rendering of the "Display" option and the weight selector, so that
    // each can be rendered later in its own column.
    if ($element['#display_field']) {
      hide($widget['display']);
    }
    hide($widget['_weight']);

    // Render everything else together in a column, without the normal wrappers.
    $widget['#theme_wrappers'] = [];

    // Show the buttons that had previously been marked as hidden in this
    // preprocess function. We use show() to undo the earlier hide().
    foreach (Element::children($operations_elements) as $key) {
      show($operations_elements[1]);
    }

    $row = [
      '#theme' => 'gent_base_file_upload',
      '#picture_element' => render($widget),
      '#picture_button' => $operations_elements,
    ];

    $rows[] = [
      $row,
    ];
  }

  $variables['table'] = [
    '#theme' => 'item_list',
    '#list_type' => 'ul',
    '#title' => NULL,
    '#items' => $rows,
    '#attributes' => [
      'class' => [
        'inline',
      ],
    ],
  ];
}

/**
 * Prepares variables for image widget templates.
 *
 * Default template: image-widget.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - element: A render element representing the image field widget.
 */
function gent_base_preprocess_image_widget(array &$variables) {
  $element = $variables['element'];

  if ($element['#cardinality'] == -1) {
    $element['#title'] = t('Add new files');
  }

  $variables['attributes'] = [
    'class' => [
      'image-widget',
      'js-form-managed-file',
      'form-managed-file',
      'clearfix',
    ],
  ];

  if (!empty($element['fids']['#value'])) {
    reset($element['#files']);
  }

  $variables['data'] = [];
  foreach (Element::children($element) as $child) {
    $variables['data'][$child] = $element[$child];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_file_link(&$variables) {
  if ($variables) {
    $options = [];
    $file = $variables['file'];
    $filenameParts = explode('.', $file->getFilename());
    $url = file_create_url($file->getFileUri());

    $variables['file_size'] = format_size($file->getSize());
    $variables['file_type'] = $filenameParts[count($filenameParts) - 1];
    $options['attributes']['class'][] = 'standalone-link';
    $options['attributes']['download'][] = $file->getFilename();

    // Use the filename as label if no description is set.
    $label = !empty($variables['description'])
      ? $variables['description']
      : $file->getFilename();
    $variables['link'] = Link::fromTextAndUrl($label, Url::fromUri($url, $options));
  }
}

/**
 * Implements hook_preprocess().
 */
function gent_base_preprocess_faqfield_definition_list_formatter(&$variables) {
  $variables['unique_list_id'] = Html::getUniqueId('faqItem');
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_node(&$variables) {
  $node = $variables['node'];
  $created = $node->getCreatedTime();
  $changed = $node->getChangedTime();

  // Set datetime attributes on "Submitted on" label.
  $variables['author_attributes']->setAttribute('datetime', \Drupal::service('date.formatter')
    ->format($created, 'custom', 'c'));
  $variables['author_attributes']->setAttribute('pubdate', 'pubdate');

  // Set detail layout class on full/default view modes.
  if (isset($variables['view_mode']) && $variables['view_mode'] === 'full') {
    $variables['attributes']['class'][] = 'detail-layout';
  }

  // Set theming variables.
  $variables['date'] = $created;
  $variables['dateChanged'] = $changed;

  // Render contact title as link.
  if ($node->getType() == 'contact') {
    $url = Url::fromRoute('entity.node.canonical', ['node' => $node->id()]);
    $link_options = [
      'attributes' => [
        'class' => [
          'standalone-link',
        ],
      ],
    ];
    $url->setOptions($link_options);
    $link = Link::fromTextAndUrl($node->getTitle(), $url);
    $variables['contact_title'] = $link;
  }

  // Add a datetime attribute to event dates.
  if ($node->getType() == 'event') {
    $event_date = $node->get('field_event_date')->getValue()[0];
    $event_start_date = (float) strtotime($event_date['value']);
    $event_end_date = (float) strtotime($event_date['end_value']);

    if ($event_start_date === $event_end_date) {
      $variables['event_datetime'] = \Drupal::service('date.formatter')->format($event_start_date, 'custom', 'c');
    }
    else {
      $variables['event_datetime'] = \Drupal::service('date.formatter')->format($event_start_date, 'custom', 'c') . '-' . \Drupal::service('date.formatter')->format($event_end_date, 'custom', 'c');
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add standalone-link class to read more links.
 */
function gent_base_preprocess_links__node(&$variables) {
  if (isset($variables['links']['node-readmore'])) {
    $readmore = &$variables['links']['node-readmore'];
    $readmore['link']['#options']['attributes']['rel'] = NULL;
    $readmore['link']['#options']['attributes']['class'] = [
      'standalone-link',
    ];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Add standalone-link class to read more links.
 */
function gent_base_preprocess_views_view(&$variables) {
  $variables['more']['#options']['attributes']['class'] = [
    'standalone-link',
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Isolate one of the selected images for the teaser (before opening the
 * modal). Currently, this'll be the first image of the gallery.
 */
function gent_base_preprocess_paragraph__timeline_item__alt(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  $entity = $paragraph->get('field_image')->entity;

  if ($entity) {
    $variables['fake_teaser_image'] = \Drupal::entityTypeManager()
      ->getViewBuilder('media')
      ->view($entity, 'teaser');
  }
}

/**
 * Implements hook_preprocess_paragraph__contact().
 *
 * Add vesta info to the variables array.
 */
function gent_base_preprocess_paragraph__contact(&$variables) {
  $paragraph = $variables['elements']['#paragraph'];
  if (isset($paragraph->get('field_contact')->entity)) {
    $variables['vesta_entity'] = $paragraph->get('field_contact')->entity->getVestaValue();
    $variables['vesta_url'] = $paragraph->get('field_contact')->entity->toUrl();
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Provide a 'gallery_full' image style URL to the image template,
 * this is the url used in the lightbox implementation.
 */
function gent_base_preprocess_media__image__gallery_multiple(&$variables) {
  _get_image_style_gallery_full($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Provide a 'gallery_full' image style URL to the image template,
 * this is the url used in the lightbox implementation.
 */
function gent_base_preprocess_media__image__gallery_single(&$variables) {
  _get_image_style_gallery_full($variables);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_oidc_menu_anonymous(&$variables) {
  $variables['login_link']->getUrl()->mergeOptions([
    'attributes' => [
      'class' => ['login-link'],
    ],
  ]);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_oidc_menu_authenticated(&$variables) {
  $variables['logout_link']->getUrl()->mergeOptions([
    'attributes' => [
      'class' => ['button', 'button-small', 'button-secondary'],
    ],
  ]);

  if ($variables['profile_link']) {
    $variables['profile_link']->getUrl()->mergeOptions([
      'attributes' => [
        'class' => ['button', 'button-small', 'button-primary'],
      ],
    ]);
  }
}

/**
 * Helper function to get a gallery_full image style URL.
 *
 * Provide a 'gallery_full' image style URL to the image template,
 * this is the url used in the lightbox implementation.
 */
function _get_image_style_gallery_full(&$variables) {
  $image_style = ImageStyle::load('gallery_full');

  if ($image_style) {
    $entity = $variables['content']['field_media_image'][0]['#item']->entity;

    if ($entity) {
      $file = $entity->getFileUri();
      $variables['gallery_full_url'] = $image_style->buildUrl($file);
    }
  }
}

/**
 * Implements hook_theme_suggestions_alter().
 */
function gent_base_theme_suggestions_alter(array &$suggestions, array $variables) {
  $original_theme_hook = $variables['theme_hook_original'];

  if (isset($variables['element']['#type']) && $variables['element']['#type'] == 'form') {
    $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#form_id']);

    if ($variables['element']['#form_id'] !== $variables['element']['#id']) {
      $suggestions[] = $original_theme_hook . '__' . str_replace('-', '_', $variables['element']['#id']);
    }
  }

  if ($original_theme_hook === 'taxonomy_term') {
    /** @var \Drupal\taxonomy\TermInterface $term */
    $term = $variables['elements']['#taxonomy_term'];
    $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

    $suggestions[] = $original_theme_hook . '__' . $sanitized_view_mode;
    $suggestions[] = $original_theme_hook . '__' . $term->bundle() . '__' . $sanitized_view_mode;
    $suggestions[] = $original_theme_hook . '__' . $term->id() . '__' . $sanitized_view_mode;
  }

  if ($original_theme_hook === 'paragraph') {
    $paragraph = $variables['elements']['#paragraph'];

    if ($paragraph->get('type')->getString() === 'timeline_frame') {
      $suggestion = _gent_base_get_timeline_display($paragraph);
      $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

      $suggestions[] = $original_theme_hook . '__' . $paragraph->bundle() . '__' . $suggestion;
      $suggestions[] = $original_theme_hook . '__' . $paragraph->bundle() . '__' . $sanitized_view_mode . '__' . $suggestion;
    }

    if ($paragraph->get('type')->getString() === 'timeline_item') {
      $parent = $paragraph->getParentEntity();
      $suggestion = _gent_base_get_timeline_display($parent);
      $sanitized_view_mode = strtr($variables['elements']['#view_mode'], '.', '_');

      $suggestions[] = $original_theme_hook . '__' . $paragraph->bundle() . '__' . $suggestion;
      $suggestions[] = $original_theme_hook . '__' . $paragraph->bundle() . '__' . $sanitized_view_mode . '__' . $suggestion;

    }
  }

  return $suggestions;
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function gent_base_theme_suggestions_views_view_alter(array &$suggestions, array $variables) {
  $suggestions[] = sprintf('views_view__%s', $variables['view']->current_display);
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function gent_base_theme_suggestions_facets_result_item_alter(array &$suggestions, array $variables) {
  $suggestions[] = 'facets_result_item__test';
}

/**
 * Implements theme_preprocess_pager()
 *
 * We override core to change the quantity of all pagers throughout the site.
 * This is a guideline determined by Stad Gent!
 */
function gent_base_preprocess_pager(&$variables) {
  /* @var $pager_manager \Drupal\Core\Pager\PagerManagerInterface */
  $pager_manager = \Drupal::service('pager.manager');

  $element = $variables['pager']['#element'];
  $parameters = $variables['pager']['#parameters'];

  // Implement hardcoded quantity of links.
  $quantity = 3;
  $route_name = $variables['pager']['#route_name'];
  $route_parameters = isset($variables['pager']['#route_parameters']) ? $variables['pager']['#route_parameters'] : [];
  global $pager_page_array, $pager_total;

  $total = $pager_total[$element];

  // Nothing to do if there is only one page.
  if ($pager_total[$element] <= 1) {
    return;
  }

  $tags = $variables['pager']['#tags'];

  // Calculate various markers within this pager piece:
  // Middle is used to "center" pages around the current page.
  $pager_middle = ceil($quantity / 2);
  // Current is the page we are currently paged to.
  $pager_current = $pager_page_array[$element] + 1;
  // First is the first page listed by this pager piece (re quantity).
  $pager_first = $pager_current - $pager_middle + 1;
  // Last is the last page listed by this pager piece (re quantity).
  $pager_last = $pager_current + $quantity - $pager_middle;
  // Max is the maximum page number.
  $pager_max = $pager_total[$element];

  // Prepare for generation loop.
  $i = $pager_first;
  if ($pager_last > $pager_max) {
    // Adjust "center" if at end of query.
    $i += ($pager_max - $pager_last);
    $pager_last = $pager_max;
  }
  if ($i <= 0) {
    // Adjust "center" if at start of query.
    $pager_last += + (1 - $i);
    $i = 1;
  }

  $items = [];

  // Create the "first" and "previous" links if we are not on the first page.
  if ($pager_page_array[$element] > 0) {
    $items['first'] = [];
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, 0),
    ];
    $items['first']['href'] = \Drupal\Core\Url::fromRoute($route_name, $route_parameters, $options);
    if (isset($tags[0])) {
      $items['first']['text'] = $tags[0];
    }

    $items['previous'] = [];
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, $pager_page_array[$element] - 1),
    ];
    $items['previous']['href'] = \Drupal\Core\Url::fromRoute($route_name, $route_parameters, $options);
    if (isset($tags[1])) {
      $items['previous']['text'] = $tags[1];
    }
  }

  if ($i !== $pager_max) {
    // Add an ellipsis if there are further previous pages.
    if ($i > 1) {
      $variables['ellipses']['previous'] = TRUE;
    }
    // Now generate the actual pager piece.
    for (; $i <= $pager_last && $i <= $pager_max; $i++) {
      $options = [
        'query' => $pager_manager->getUpdatedParameters($parameters, $element, $i - 1),
      ];
      $items['pages'][$i]['href'] = \Drupal\Core\Url::fromRoute($route_name, $route_parameters, $options);
      if ($i === $pager_current) {
        $variables['current'] = $i;
      }
    }
    // Add an ellipsis if there are further next pages.
    if ($i < $pager_max + 1) {
      $variables['ellipses']['next'] = TRUE;
    }
  }

  // Create the "next" and "last" links if we are not on the last page.
  if ($pager_page_array[$element] < ($pager_max - 1)) {
    $items['next'] = [];
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, $pager_page_array[$element] + 1),
    ];
    $items['next']['href'] = \Drupal\Core\Url::fromRoute($route_name, $route_parameters, $options);
    if (isset($tags[3])) {
      $items['next']['text'] = $tags[3];
    }

    $items['last'] = [];
    $options = [
      'query' => $pager_manager->getUpdatedParameters($parameters, $element, $pager_max - 1),
    ];
    $items['last']['href'] = \Drupal\Core\Url::fromRoute($route_name, $route_parameters, $options);
    if (isset($tags[4])) {
      $items['last']['text'] = $tags[4];
    }
  }

  $variables['items'] = $items;

  // The rendered link needs to play well with any other query parameter used
  // on the page, like exposed filters, so for the cacheability all query
  // parameters matter.
  $variables['#cache']['contexts'][] = 'url.query_args';

  // Add hardcode first and last text.
  $variables['items']['first']['text'] = '1';
  $variables['total'] = $total;
  $variables['items']['last']['text'] = $total;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_paragraph__call_to_action(&$variables) {
  $paragraph = $variables['paragraph'];
  $fields = [
    'field_primary_action',
    'field_secondary_action',
  ];

  foreach ($fields as $i => $field) {
    if (!$paragraph->hasField($field . '_type')) {
      break;
    }

    if (!$paragraph->get($field . '_type')->isEmpty()) {
      $action = [
        '#type' => 'link',
        '#title' => $paragraph->get($field . '_title')->value,
        '#attributes' => [
          'class' => $i > 0 ? ['standalone-link'] : ['button', 'button-primary'],
        ],
      ];

      if ($paragraph->get($field . '_type')->value === 'link') {
        $action['#url'] = $paragraph->get($field . '_link')->first()->getUrl();
      }
      else {
        $data = _gent_base_get_entity_reference_file_data($variables, $field . '_document');
        if (empty($data) || !isset($data['file_uri'])) {
          break;
        }

        $action['#url'] = Url::fromUri($data['file_uri']);
        $action['#attributes']['download'] = TRUE;

        $variables['content'][$field . '_size'] = [
          '#type' => 'html_tag',
          '#tag' => 'span',
          '#value' => $data['file_type'] . ' <span class="file-size">(' . $data['file_size'] . ')</span>',
          '#attributes' => ['class' => 'file-type'],
        ];
      }

      $variables['content'][$field] = $action;
    }

    unset($variables['content'][$field . '_link']);
    unset($variables['content'][$field . '_document']);
    unset($variables['content'][$field . '_type']);
    unset($variables['content'][$field . '_title']);
  }
}

/**
 * Implements hook_page_attachments_alter().
 */
function gent_base_page_attachments_alter(array &$page) {
  // Disable IE compatibility mode for the theme.
  $ie_edge = [
    '#type' => 'html_tag',
    '#tag' => 'meta',
    '#attributes' => [
      'http-equiv' => 'X-UA-Compatible',
      'content' => 'IE=edge',
    ],
  ];

  $page['#attached']['html_head'][] = [$ie_edge, 'ie_edge'];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_facets_item_list__checkbox_popup(&$variables) {
  foreach ($variables['items'] as &$item) {
    if (isset($item['value']['children'])) {
      $title = $item['value']['#title']['#value'];
      $item['value']['#title']['#value'] = t('@category - All', ['@category' => $title]);
      $item['value']['#title']['#original'] = $title;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_vesta(&$variables) {
  /* @var $entity Drupal\dg_vesta\Entity\Vesta */
  $entity = $variables['elements']['#vesta'];

  // Because vesta entities are language undefined we need to prefix the
  // language code.
  $variables['entity'] = $entity->getVestaValue();
  $variables['url'] = $entity->toUrl()->toString();

  // The renderable fields need to be converted to variables
  // so we can adjust them elsewhere.
  $variables['name'] = $variables['entity']->getName();
  $variables['address'] = $variables['entity']->getPostalAddress();
  $variables['contactnumbers'] = $variables['entity']->getContactNumbers();
  $variables['emailaddresses'] = $variables['entity']->getEmailAddresses();
  $variables['websites'] = $variables['entity']->getWebsites();
  $variables['extrainfo'] = $variables['entity']->getExtrainfo();
  $variables['accessibility'] = $variables['entity']->getAccessibility();
  $variables['id'] = $variables['entity']->getId();

  if ($variables['elements']['#view_mode'] === 'full') {
    $variables['related'] = [];

    /* @var $keyword Gent\Services\Vesta\Value\Keyword */
    $termStorage = \Drupal::entityTypeManager()->getStorage('taxonomy_term');
    foreach ($entity->getVestaValue()->getKeywords() as &$keyword) {
      $terms = $termStorage->loadByProperties([
        'field_vesta_id' => $keyword->getId(),
      ]);

      $variables['related'][] = reset($terms);
    }
  }
}

/**
 * Implements hook_preprocess_dg_maps_map().
 */
function gent_base_preprocess_dg_maps_map(&$variables) {
  $variables['#attached']['drupalSettings']['gent_base']['dg_maps'] = [
    'img_base' => drupal_get_path('theme', 'gent_base') . '/source/img/',
    'legend_title' => t('View on the map'),
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function gent_base_preprocess_form_element_bare(&$variables) {
  template_preprocess_form_element($variables);
}

/**
 * Implements hook_preprocess_image().
 */
function gent_base_preprocess_image(&$variables) {
  $attributes = &$variables['attributes'];
  if (!isset($attributes['alt']) || !$attributes['alt']) {
    $attributes['alt'] = "";
  }
}

/**
 * Implements hook_preprocess().
 */
function gent_base_preprocess_block__language_switcher(&$variables) {
  $variables['active_language'] = \Drupal::languageManager()
    ->getCurrentLanguage();
}

/**
 * Implements theme_preprocess_HOOK().
 */
function gent_base_preprocess_links__language_block(&$variables) {
  $currentLanguageCode = \Drupal::languageManager()
    ->getCurrentLanguage()
    ->getId();

  if ($currentLanguageCode) {
    $variables['current_language_code'] = $currentLanguageCode;
  }

  foreach ($variables['links'] as $i => $link) {
    $link['link']['#title'] = $link['text'] = $i;
    $variables['links'][$i] = $link;

    /** @var \Drupal\language\Entity\ConfigurableLanguage $linkLanguage */
    $linkLanguage = $link['link']['#options']['language'];
    if ($currentLanguageCode === $linkLanguage->get('id')) {
      unset($variables['links'][$i]);
    }
  }

}

/**
 * Implements template_preprocess_file_upload_help().
 *
 * We alter the upload description to follow ghent styleguide guidelines.
 */
function gent_base_preprocess_file_upload_help(&$variables) {
  $descriptions = [];

  $upload_validators = $variables['upload_validators'];
  if (isset($upload_validators['file_validate_extensions'])) {
    $extensions = implode(', ', explode(' ', $upload_validators['file_validate_extensions'][0]));
    $descriptions[] = t('Allowed types: @extensions.', ['@extensions' => $extensions]);
  }
  if (isset($upload_validators['file_validate_size'])) {
    $descriptions[] = t('Max filesize: @size.', ['@size' => format_size($upload_validators['file_validate_size'][0])]);
  }

  if (isset($upload_validators['file_validate_image_resolution'])) {
    $min = $upload_validators['file_validate_image_resolution'][1];
    if ($min) {
      $descriptions[] = t('Images must be larger than @min pixels.', ['@min' => $min]);
    }
  }

  $variables['descriptions'] = implode(' ', $descriptions);
}
